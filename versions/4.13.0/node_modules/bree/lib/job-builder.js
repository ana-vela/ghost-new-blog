"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _require = require('path'),
    join = _require.join;

var isSANB = require('is-string-and-not-blank');

var isValidPath = require('is-valid-path');

var _require2 = require('boolean'),
    boolean = _require2.boolean;

var later = require('@breejs/later');

var _require3 = require('./job-utils'),
    isSchedule = _require3.isSchedule,
    parseValue = _require3.parseValue;

later.date.localTime(); // eslint-disable-next-line complexity

var buildJob = function buildJob(job, config) {
  if (isSANB(job)) {
    var path = join(config.root, job.endsWith('.js') || job.endsWith('.mjs') ? job : "".concat(job, ".").concat(config.defaultExtension));
    return {
      name: job,
      path: path,
      timeout: config.timeout,
      interval: config.interval
    };
  }

  if (typeof job === 'function') {
    var _path = "(".concat(job.toString(), ")()");

    return {
      name: job.name,
      path: _path,
      worker: {
        eval: true
      },
      timeout: config.timeout,
      interval: config.interval
    };
  } // Process job.path


  if (typeof job.path === 'function') {
    var _path2 = "(".concat(job.path.toString(), ")()");

    job.path = _path2;
    job.worker = _objectSpread({
      eval: true
    }, job.worker);
  } else {
    var _path3 = isSANB(job.path) ? job.path : join(config.root, job.name.endsWith('.js') || job.name.endsWith('.mjs') ? job.name : "".concat(job.name, ".").concat(config.defaultExtension));

    if (isValidPath(_path3)) {
      job.path = _path3;
    } else {
      // Assume that it's a transformed eval string
      job.worker = _objectSpread({
        eval: true
      }, job.worker);
    }
  }

  if (typeof job.timeout !== 'undefined') {
    job.timeout = parseValue(job.timeout);
  }

  if (typeof job.interval !== 'undefined') {
    job.interval = parseValue(job.interval);
  } // Build cron


  if (typeof job.cron !== 'undefined') {
    if (isSchedule(job.cron)) {
      job.interval = job.cron; // Delete job.cron;
    } else {
      job.interval = later.parse.cron(job.cron, boolean(typeof job.hasSeconds === 'undefined' ? config.hasSeconds : job.hasSeconds));
    }
  } // If timeout was undefined, cron was undefined,
  // and date was undefined then set the default
  // (as long as the default timeout is >= 0)


  if (Number.isFinite(config.timeout) && config.timeout >= 0 && typeof job.timeout === 'undefined' && typeof job.cron === 'undefined' && typeof job.date === 'undefined' && typeof job.interval === 'undefined') {
    job.timeout = config.timeout;
  } // If interval was undefined, cron was undefined,
  // and date was undefined then set the default
  // (as long as the default interval is > 0, or it was a schedule, or it was valid)


  if ((Number.isFinite(config.interval) && config.interval > 0 || isSchedule(config.interval)) && typeof job.interval === 'undefined' && typeof job.cron === 'undefined' && typeof job.date === 'undefined') {
    job.interval = config.interval;
  }

  return job;
};

module.exports = buildJob;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,