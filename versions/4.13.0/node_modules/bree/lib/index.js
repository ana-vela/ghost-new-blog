"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var EventEmitter = require('events');

var fs = require('fs');

var _require = require('path'),
    resolve = _require.resolve;

var pWaitFor = require('p-wait-for');

var combineErrors = require('combine-errors');

var debug = require('debug')('bree');

var isSANB = require('is-string-and-not-blank');

var isValidPath = require('is-valid-path');

var later = require('@breejs/later');

var threads = require('bthreads');

var _require2 = require('safe-timers'),
    setTimeout = _require2.setTimeout,
    setInterval = _require2.setInterval;

var _require3 = require('./job-utils'),
    isSchedule = _require3.isSchedule,
    getName = _require3.getName,
    getHumanToMs = _require3.getHumanToMs,
    parseValue = _require3.parseValue,
    getJobNames = _require3.getJobNames;

var buildJob = require('./job-builder');

var validateJob = require('./job-validator'); // Bthreads requires us to do this for web workers (see bthreads docs for insight)


threads.Buffer = Buffer; // Instead of `threads.browser` checks below, we previously used this boolean
// const hasFsStatSync = typeof fs === 'object' && typeof fs.statSync === 'function';

var Bree = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2.default)(Bree, _EventEmitter);

  var _super = _createSuper(Bree);

  function Bree(config) {
    var _this;

    (0, _classCallCheck2.default)(this, Bree);
    _this = _super.call(this);
    _this.config = _objectSpread({
      // We recommend using Cabin for logging
      // <https://cabinjs.com>
      logger: console,
      // Set this to `false` to prevent requiring a root directory of jobs
      // (e.g. if your jobs are not all in one directory)
      root: threads.browser
      /* istanbul ignore next */
      ? threads.resolve('jobs') : resolve('jobs'),
      // Default timeout for jobs
      // (set this to `false` if you do not wish for a default timeout to be set)
      timeout: 0,
      // Default interval for jobs
      // (set this to `0` for no interval, and > 0 for a default interval to be set)
      interval: 0,
      // This is an Array of your job definitions (see README for examples)
      jobs: [],
      // <https://breejs.github.io/later/parsers.html#cron>
      // (can be overridden on a job basis with same prop name)
      hasSeconds: false,
      // <https://github.com/Airfooox/cron-validate>
      cronValidate: {},
      // If you set a value > 0 here, then it will terminate workers after this time (ms)
      closeWorkerAfterMs: 0,
      // Could also be mjs if desired
      // (this is the default extension if you just specify a job's name without ".js" or ".mjs")
      defaultExtension: 'js',
      // Default worker options to pass to ~`new Worker`~ `new threads.Worker`
      // (can be overridden on a per job basis)
      // <https://nodejs.org/api/worker_threads.html#worker_threads_new_worker_filename_options>
      worker: {},
      // Custom handler to execute when error events are emitted by the workers or when they exit
      // with non-zero code
      // pass in a callback function with following signature: `(error, workerMetadata) => { // custom handling here }`
      errorHandler: null,
      // Custom handler executed when a `message` event is received from a worker.
      // A special 'done' even is also broadcasted while leaving worker shutdown logic in place.
      workerMessageHandler: null,
      //
      // if you set this to `true`, then a second arg is passed to log output
      // and it will be an Object with `{ worker: Object }` set, for example:
      // (see the documentation at <https://nodejs.org/api/worker_threads.html> for more insight)
      //
      // logger.info('...', {
      //   worker: {
      //     isMainThread: Boolean
      //     resourceLimits: Object,
      //     threadId: String
      //   }
      // });
      //
      outputWorkerMetadata: false
    }, config); //
    // if `hasSeconds` is `true` then ensure that
    // `cronValidate` object has `override` object with `useSeconds` set to `true`
    // <https://github.com/breejs/bree/issues/7>
    //

    if (_this.config.hasSeconds) {
      _this.config.cronValidate = _objectSpread(_objectSpread({}, _this.config.cronValidate), {}, {
        preset: _this.config.cronValidate && _this.config.cronValidate.preset ? _this.config.cronValidate.preset : 'default',
        override: _objectSpread(_objectSpread({}, _this.config.cronValidate && _this.config.cronValidate.override ? _this.config.cronValidate.override : {}), {}, {
          useSeconds: true
        })
      });
    }

    debug('config', _this.config);
    _this.closeWorkerAfterMs = {};
    _this.workers = {};
    _this.timeouts = {};
    _this.intervals = {};
    _this.isSchedule = isSchedule;
    _this.getWorkerMetadata = _this.getWorkerMetadata.bind((0, _assertThisInitialized2.default)(_this));
    _this.run = _this.run.bind((0, _assertThisInitialized2.default)(_this));
    _this.start = _this.start.bind((0, _assertThisInitialized2.default)(_this));
    _this.stop = _this.stop.bind((0, _assertThisInitialized2.default)(_this));
    _this.add = _this.add.bind((0, _assertThisInitialized2.default)(_this));
    _this.remove = _this.remove.bind((0, _assertThisInitialized2.default)(_this));
    _this.validateJob = validateJob;
    _this.getName = getName;
    _this.getHumanToMs = getHumanToMs;
    _this.parseValue = parseValue; // so plugins can extend constructor

    _this.init = _this.init.bind((0, _assertThisInitialized2.default)(_this));

    _this.init();

    debug('this.config.jobs', _this.config.jobs);
    return _this;
  }

  (0, _createClass2.default)(Bree, [{
    key: "init",
    value: function init() {
      // Validate root (sync check)
      if (isSANB(this.config.root)) {
        /* istanbul ignore next */
        if (!threads.browser && isValidPath(this.config.root)) {
          var stats = fs.statSync(this.config.root);

          if (!stats.isDirectory()) {
            throw new Error("Root directory of ".concat(this.config.root, " does not exist"));
          }
        }
      } // Validate timeout


      this.config.timeout = this.parseValue(this.config.timeout);
      debug('timeout', this.config.timeout); // Validate interval

      this.config.interval = this.parseValue(this.config.interval);
      debug('interval', this.config.interval); //
      // if `this.config.jobs` is an empty array
      // then we should try to load `jobs/index.js`
      //

      if (this.config.root && (!Array.isArray(this.config.jobs) || this.config.jobs.length === 0)) {
        try {
          this.config.jobs = threads.require(this.config.root);
        } catch (err) {
          this.config.logger.error(err);
        }
      } //
      // validate jobs
      //


      if (!Array.isArray(this.config.jobs)) {
        throw new TypeError('Jobs must be an Array');
      } // Provide human-friendly errors for complex configurations


      var errors = [];
      /*
      Jobs = [
        'name',
        { name: 'boot' },
        { name: 'timeout', timeout: ms('3s') },
        { name: 'cron', cron: '* * * * *' },
        { name: 'cron with timeout', timeout: '3s', cron: '* * * * *' },
        { name: 'interval', interval: ms('4s') }
        { name: 'interval', path: '/some/path/to/script.js', interval: ms('4s') },
        { name: 'timeout', timeout: 'three minutes' },
        { name: 'interval', interval: 'one minute' },
        { name: 'timeout', timeout: '3s' },
        { name: 'interval', interval: '30d' },
        { name: 'schedule object', interval: { schedules: [] } }
      ]
      */

      for (var i = 0; i < this.config.jobs.length; i++) {
        try {
          var names = getJobNames(this.config.jobs, i);
          validateJob(this.config.jobs[i], i, names, this.config);
          this.config.jobs[i] = buildJob(this.config.jobs[i], this.config);
        } catch (err) {
          errors.push(err);
        }
      } // If there were any errors then throw them


      if (errors.length > 0) {
        throw combineErrors(errors);
      }
    }
  }, {
    key: "getWorkerMetadata",
    value: function getWorkerMetadata(name) {
      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var job = this.config.jobs.find(function (j) {
        return j.name === name;
      });

      if (!job) {
        throw new Error("Job \"".concat(name, "\" does not exist"));
      }

      if (!this.config.outputWorkerMetadata && !job.outputWorkerMetadata) {
        return meta && (typeof meta.err !== 'undefined' || typeof meta.message !== 'undefined') ? meta : undefined;
      }

      return this.workers[name] ? _objectSpread(_objectSpread({}, meta), {}, {
        worker: {
          isMainThread: this.workers[name].isMainThread,
          resourceLimits: this.workers[name].resourceLimits,
          threadId: this.workers[name].threadId
        }
      }) : meta;
    }
  }, {
    key: "run",
    value: function run(name) {
      var _this2 = this;

      debug('run', name);

      if (name) {
        var job = this.config.jobs.find(function (j) {
          return j.name === name;
        });

        if (!job) {
          throw new Error("Job \"".concat(name, "\" does not exist"));
        }

        if (this.workers[name]) {
          return this.config.logger.warn(new Error("Job \"".concat(name, "\" is already running")), this.getWorkerMetadata(name));
        }

        debug('starting worker', name);

        var object = _objectSpread(_objectSpread(_objectSpread({}, this.config.worker ? this.config.worker : {}), job.worker ? job.worker : {}), {}, {
          workerData: _objectSpread(_objectSpread({
            job: job
          }, this.config.worker && this.config.worker.workerData ? this.config.worker.workerData : {}), job.worker && job.worker.workerData ? job.worker.workerData : {})
        });

        this.workers[name] = new threads.Worker(job.path, object);
        this.emit('worker created', name);
        debug('worker started', name);
        var prefix = "Worker for job \"".concat(name, "\"");
        this.workers[name].on('online', function () {
          // If we specified a value for `closeWorkerAfterMs`
          // then we need to terminate it after that execution time
          var closeWorkerAfterMs = Number.isFinite(job.closeWorkerAfterMs) ? job.closeWorkerAfterMs : _this2.config.closeWorkerAfterMs;

          if (Number.isFinite(closeWorkerAfterMs) && closeWorkerAfterMs > 0) {
            debug('worker has close set', name, closeWorkerAfterMs);
            _this2.closeWorkerAfterMs[name] = setTimeout(function () {
              /* istanbul ignore else */
              if (_this2.workers[name]) {
                debug('worker has been terminated', name);

                _this2.workers[name].terminate();
              }
            }, closeWorkerAfterMs);
          }

          _this2.config.logger.info("".concat(prefix, " online"), _this2.getWorkerMetadata(name));
        });
        this.workers[name].on('message', function (message) {
          var metadata = _this2.getWorkerMetadata(name, {
            message: message
          });

          if (_this2.config.workerMessageHandler) {
            _this2.config.workerMessageHandler(_objectSpread({
              name: name
            }, metadata));
          } else if (message === 'done') {
            _this2.config.logger.info("".concat(prefix, " signaled completion"), metadata);
          } else {
            _this2.config.logger.info("".concat(prefix, " sent a message"), metadata);
          }

          if (message === 'done') {
            _this2.workers[name].removeAllListeners('message');

            _this2.workers[name].removeAllListeners('exit');

            _this2.workers[name].terminate();

            delete _this2.workers[name];
          }
        }); // NOTE: you cannot catch messageerror since it is a Node internal
        //       (if anyone has any idea how to catch this in tests let us know)

        /* istanbul ignore next */

        this.workers[name].on('messageerror', function (err) {
          if (_this2.config.errorHandler) {
            _this2.config.errorHandler(err, _objectSpread({
              name: name
            }, _this2.getWorkerMetadata(name, {
              err: err
            })));
          } else {
            _this2.config.logger.error("".concat(prefix, " had a message error"), _this2.getWorkerMetadata(name, {
              err: err
            }));
          }
        });
        this.workers[name].on('error', function (err) {
          if (_this2.config.errorHandler) {
            _this2.config.errorHandler(err, _objectSpread({
              name: name
            }, _this2.getWorkerMetadata(name, {
              err: err
            })));
          } else {
            _this2.config.logger.error("".concat(prefix, " had an error"), _this2.getWorkerMetadata(name, {
              err: err
            }));
          }
        });
        this.workers[name].on('exit', function (code) {
          var level = code === 0 ? 'info' : 'error';

          if (level === 'error' && _this2.config.errorHandler) {
            _this2.config.errorHandler(new Error("".concat(prefix, " exited with code ").concat(code)), _objectSpread({
              name: name
            }, _this2.getWorkerMetadata(name)));
          } else {
            _this2.config.logger[level]("".concat(prefix, " exited with code ").concat(code), _this2.getWorkerMetadata(name));
          }

          delete _this2.workers[name];

          _this2.emit('worker deleted', name);
        });
        return;
      }

      var _iterator = _createForOfIteratorHelper(this.config.jobs),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _job = _step.value;
          this.run(_job.name);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "start",
    value: function start(name) {
      var _this3 = this;

      debug('start', name);

      if (name) {
        var job = this.config.jobs.find(function (j) {
          return j.name === name;
        });

        if (!job) {
          throw new Error("Job ".concat(name, " does not exist"));
        }

        if (this.timeouts[name] || this.intervals[name] || this.workers[name]) {
          return this.config.logger.warn(new Error("Job \"".concat(name, "\" is already started")));
        }

        debug('job', job); // Check for date and if it is in the past then don't run it

        if (job.date instanceof Date) {
          debug('job date', job);

          if (job.date.getTime() < Date.now()) {
            debug('job date was in the past');
            return;
          }

          this.timeouts[name] = setTimeout(function () {
            _this3.run(name);

            if (_this3.isSchedule(job.interval)) {
              debug('job.interval is schedule', job);
              _this3.intervals[name] = later.setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            } else if (Number.isFinite(job.interval) && job.interval > 0) {
              debug('job.interval is finite', job);
              _this3.intervals[name] = setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            } else {
              debug('job.date was scheduled to run only once', job);
            }

            delete _this3.timeouts[name];
          }, job.date.getTime() - Date.now());
          return;
        } // This is only complex because both timeout and interval can be a schedule


        if (this.isSchedule(job.timeout)) {
          debug('job timeout is schedule', job);
          this.timeouts[name] = later.setTimeout(function () {
            _this3.run(name);

            if (_this3.isSchedule(job.interval)) {
              debug('job.interval is schedule', job);
              _this3.intervals[name] = later.setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            } else if (Number.isFinite(job.interval) && job.interval > 0) {
              debug('job.interval is finite', job);
              _this3.intervals[name] = setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            }

            delete _this3.timeouts[name];
          }, job.timeout);
          return;
        }

        if (Number.isFinite(job.timeout)) {
          debug('job timeout is finite', job);
          this.timeouts[name] = setTimeout(function () {
            _this3.run(name);

            if (_this3.isSchedule(job.interval)) {
              debug('job.interval is schedule', job);
              _this3.intervals[name] = later.setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            } else if (Number.isFinite(job.interval) && job.interval > 0) {
              debug('job.interval is finite', job.interval);
              _this3.intervals[name] = setInterval(function () {
                return _this3.run(name);
              }, job.interval);
            }

            delete _this3.timeouts[name];
          }, job.timeout);
        } else if (this.isSchedule(job.interval)) {
          debug('job.interval is schedule', job);
          this.intervals[name] = later.setInterval(function () {
            return _this3.run(name);
          }, job.interval);
        } else if (Number.isFinite(job.interval) && job.interval > 0) {
          debug('job.interval is finite', job);
          this.intervals[name] = setInterval(function () {
            return _this3.run(name);
          }, job.interval);
        }

        return;
      }

      var _iterator2 = _createForOfIteratorHelper(this.config.jobs),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _job2 = _step2.value;
          this.start(_job2.name);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "stop",
    value: function () {
      var _stop = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(name) {
        var _this4 = this;

        var _iterator3, _step3, job;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!name) {
                  _context.next = 6;
                  break;
                }

                if (this.timeouts[name]) {
                  if ((0, _typeof2.default)(this.timeouts[name]) === 'object' && typeof this.timeouts[name].clear === 'function') {
                    this.timeouts[name].clear();
                  }

                  delete this.timeouts[name];
                }

                if (this.intervals[name]) {
                  if ((0, _typeof2.default)(this.intervals[name]) === 'object' && typeof this.intervals[name].clear === 'function') {
                    this.intervals[name].clear();
                  }

                  delete this.intervals[name];
                }

                if (this.workers[name]) {
                  this.workers[name].once('message', function (message) {
                    if (message === 'cancelled') {
                      _this4.config.logger.info("Gracefully cancelled worker for job \"".concat(name, "\""), _this4.getWorkerMetadata(name));

                      _this4.workers[name].terminate();
                    }
                  });
                  this.workers[name].postMessage('cancel');
                }

                if (this.closeWorkerAfterMs[name]) {
                  if ((0, _typeof2.default)(this.closeWorkerAfterMs[name]) === 'object' && typeof this.closeWorkerAfterMs[name].clear === 'function') {
                    this.closeWorkerAfterMs[name].clear();
                  }

                  delete this.closeWorkerAfterMs[name];
                }

                return _context.abrupt("return", pWaitFor(function () {
                  return _this4.workers[name] === undefined;
                }));

              case 6:
                _iterator3 = _createForOfIteratorHelper(this.config.jobs);

                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    job = _step3.value;
                    this.stop(job.name);
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }

                return _context.abrupt("return", pWaitFor(function () {
                  return Object.keys(_this4.workers).length === 0;
                }));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function stop(_x) {
        return _stop.apply(this, arguments);
      }

      return stop;
    }()
  }, {
    key: "add",
    value: function add(jobs) {
      var _this$config$jobs;

      //
      // make sure jobs is an array
      //
      if (!Array.isArray(jobs)) {
        jobs = [jobs];
      }

      var errors = [];
      var addedJobs = [];

      var _iterator4 = _createForOfIteratorHelper(jobs.entries()),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _step4$value = (0, _slicedToArray2.default)(_step4.value, 2),
              i = _step4$value[0],
              job_ = _step4$value[1];

          try {
            var names = [].concat((0, _toConsumableArray2.default)(getJobNames(jobs, i)), (0, _toConsumableArray2.default)(getJobNames(this.config.jobs)));
            validateJob(job_, i, names, this.config);
            var job = buildJob(job_, this.config);
            addedJobs.push(job);
          } catch (err) {
            errors.push(err);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      debug('jobs added', this.config.jobs); // If there were any errors then throw them

      if (errors.length > 0) {
        throw combineErrors(errors);
      }

      (_this$config$jobs = this.config.jobs).push.apply(_this$config$jobs, addedJobs);

      return addedJobs;
    }
  }, {
    key: "remove",
    value: function () {
      var _remove = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(name) {
        var job;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                job = this.config.jobs.find(function (j) {
                  return j.name === name;
                });

                if (job) {
                  _context2.next = 3;
                  break;
                }

                throw new Error("Job \"".concat(name, "\" does not exist"));

              case 3:
                _context2.next = 5;
                return this.stop(name);

              case 5:
                this.config.jobs = this.config.jobs.filter(function (j) {
                  return j.name !== name;
                });

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function remove(_x2) {
        return _remove.apply(this, arguments);
      }

      return remove;
    }()
  }]);
  return Bree;
}(EventEmitter); // Expose bthreads (useful for tests)
// https://github.com/chjj/bthreads#api


Bree.threads = {
  backend: threads.backend,
  browser: threads.browser,
  location: threads.location,
  filename: threads.filename,
  dirname: threads.dirname,
  require: threads.require,
  resolve: threads.resolve,
  exit: threads.exit,
  cores: threads.cores
}; // plugins inspired by Dayjs

Bree.extend = function (plugin, options) {
  if (!plugin.$i) {
    // install plugin only once
    plugin(options, Bree);
    plugin.$i = true;
  }

  return Bree;
};

module.exports = Bree;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,